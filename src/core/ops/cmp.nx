module core.ops;

// tmp
import core.marker;

public enum Ordering : u8
{
    Less,
    Equal,
    Greater
}

public interface OpPartialEq<T>
{
    public func(&self) opEq(other:& T) -> bool;
    public func(&self) opNe(other:& T) -> bool;
}

public interface OpPartialOrd<T>
{
    public func(&self) opCmp(other:&T) -> Ordering;

    public func(&self) opLt(other:&T) -> bool
    {
        return self.opCmp(other) == core::ops::Ordering::Less;
    }

    public func(&self) opLe(other:&T) -> bool
    {
        return self.opCmp(other) != core::ops::Ordering::Greater;
    }

    public func(&self) opGt(other:&T) -> bool
    {
        return self.opCmp(other) == core::ops::Ordering::Greater;
    }

    public func(&self) opGe(other:&T) -> bool
    {
        return self.opCmp(other) != core::ops::Ordering::Less;
    }
}

public interface OpEq<T> : OpPartialEq<T>
{
    public func(&self) opNe(other:&T) -> bool
    {
        return !self.opEq(other);
    }
}

public interface OpOrd<T> : OpEq<T> + OpPartialOrd<T>
{
    public func(&self) opEq(other:&T)
    {
        return self.opCmp(other) == core::ops::Ordering::Equal;
    }
}



impl<T> T : OpEq where T is core::marker::ValEnum
{
    func(&self) opEq(other:&T) -> bool
    {
        return self == other;
    }

    public func(&self) opNe(other:&T) -> bool
    {
        return self != other;
    }
}


macro ImplFullOrd($($ty:type)*)
{
    ${
        impl $ty : OpOrd<$ty>
        {
            func(&self) opCmp(other:$ty) -> core::ops::Ordering
            {
                if self < other
                {
                    return core::ops::Ordering::Less;
                }
                if self > other
                {
                    return core::ops::Ordering::Greater;
                }
                return core::ops::Ordering::Equal;
            }
        }
    }
}
ImplFullOrd!{ i8 i16 i32 i64 i128 isize u8 u16 u32 u64 u128 usize char bool }


macro ImplPartialOrd($($ty:type)*)
{
    ${
        impl $ty : OpPartialOrd<$ty>
        {
            func (&self) opCmp(other:$ty) -> core::ops::Ordering
            {
                if self < other
                {
                    return core::ops::Ordering::Less;
                }
                if self > other
                {
                    return core::ops::Ordering::Greater;
                }
                return core::ops::Ordering::Equal;
            }
        }

        impl $ty : OpPartialEq<$ty>
        {
            func (&self) opEq(other:$ty) -> bool
            {
                return self == other;
            }

            func (&self) opNe(other:$ty) -> bool
            {
                return self != other;
            }
        }
    }
}
ImplPartialOrd!{ f16 f32 f64 f128 }