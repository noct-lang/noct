module pack.subpack.mod;

import some.other.pack : Some::Sym1 as name, Some::Sym2;

struct StructName
{
    a : i8,
    b, c : u8
}

union UnionName
{
    a : i32,
    b : u32,
    c : f32
}

enum ValueEnumName : u8
{
    Val0,
    Val1 = 2,
}

enum AdtEnumName
{
    BlankMember,
    TupleMember(i32, u32),
    StructMember{ x : i32, y, z : f32 }
}

interface MarkerInterfaceName;

weak interface WeakInterfaceName
{
    func MethodName();
}

interface StrongInterfaceName
{
    func(self) MethodName()
    {

    }
}

typealias TypealiasName = i8;
typedef TypedefName = u8;

func FuncName()
{
    {

    }

    if true
    {

    }
    else if a := false; a
    {

    }

    loop
    {

    }

    while true
    {

    }

    do
    {

    }
    while true;

    for a, b in range
    {
        
    }

    switch val
    {
        ... => {},
        null => {},
        a => {},
        a -> 1..3 => {},
        (a, b, c) => {},
        enumMember(a, b) => {},
        some::Aggr{ a, b, c } => {},
        some::Aggr{ a: x, b: y, c: z } => {},
        [a, _, 1] => {},
        4 | 5 | 6 => {},
        is f32 => {},
        true where false => {},
        _ => {}
    }

    :LabelName:

    break;
    break BreakName;

    continue;
    continue ContinueName;

    fallthrough;

    goto GotoName;

    return 1;
    return 1, 2, 3;

    1;

    defer 5;
    errdefer 6;

    unsafe
    {

    }

    #if (true)
    {

    }

    #conditional(CondIden)
    {

    }
    else #debug(DebugIden)
    {

    }
    
    a = b;
    c ? t : f;
    x + z;
    a in b;
    a !in b;
    a is u32;
    ++i;
    j++;
    A::B::C;
    Iden::<Type as Interface>::Member;
    arr[index];
    arr[start:end];
    arr[start0:];
    arr[:end0];
    NoArgFunc();
    FuncName(1, 2);
    aggr.member;
    aggr.NoArgMethod();
    aggr.Method(true, false);
    tup.4;
    i as u32;
    i as? u32;
    i as! u32;
    i transmute f32;
    move m;
    a := { return i; };
    b := unsafe true;
    c := 1, 2;
    d := _;
    | a , b : u32 | -> bool {};
    #run r;
    GenericName!<i32, {N}>;
    MacroName!(a, b, c);
    iden!!;
}

func MultiRetFunc() -> (i32, i32){}
func MultiRetFunc() -> (name : i32, other : i32){}

func GenericFunc<A, B is IA + IB = C, X : i32, Y : f32 = 2.5, :u8, :{ a + b }>() where A is IA, X is IB + IC
{

}

macro DeclMacroName ($a:iden => $b:expr)
{

}

macro RulesDeclMacroName
{
    ( $ty:type, $($ts:toks ,)* ) => {}
}

macro func DeclMacroName(ToksName) ($($a:iden,)*)
{
    ${
        $a = 0;
    }
}

macro func RulesDeclMacroName(ToksName)
{
    ( $ty:type, $($ts:toks ,)* ) => {}
}

#unittest "unit test name"
{

}

#benchmark "bench name"
{

}